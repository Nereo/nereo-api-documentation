FORMAT: 1A
HOST: https://absences.nereo.com/api

# Nereo API

Nereo API let's you integrate leaves management into your internal processes or tools. [Save time: automate leaves management with Nereo.](https://nereo.com)

> At the moment, only leave requests can be created and edited. The other endpoints are read-only, but they will come later.

**[Subscribe to our API newsletter to be kept informed of the evolutions.](https://app.mailjet.com/widget/iframe/25Ry/2xV)**

## Authentication
To authenticate through the API, you will need a token that you have to provide in the `Authorization` header of your request, prefixed by the keyword `Token`. For example:

```
Authorization: Token MyRandomToken
```

> To get your token, go to your profile, in the Developers tab.

>    Please note that this token shares the **same rights** as your user account:
>
>    * If you're a **administrator**, you'll be able to view, create and edit every objects ;
>    * If you're a **validator**, you'll be able to view, create and edit your objects and the ones belonging to the persons you validate ;
>    * If you're a **regular user**, you'll only be able to view, create and edit your own objects.

# Group Users
Users represent the employees of the company managing their leave on Nereo.

## User [/users/{id}/]

+ Parameters
    + id: 1 (number) - The ID of the User.

### Retrieve a User [GET]
Retrieve the User with the given ID.

+ Response 200 (application/json)
    + Attributes (User)

### Get the balances of a User [POST /users/{id}/balances/]
Get the balances of *each* absences types of a User for *each* day between two dates.

+ Request
    + Attributes (object)
        + start_date: `2017-01-01` (string, required) - First date to retrieve in format `YYYY-MM-DD`.
        + end_date: `2017-01-07` (string, required) - Last date to retrieve in format `YYYY-MM-DD`.

+ Response 200 (application/json)
    + Attributes (object)
        + user: 1 (number) - ID of the User
        + balance_user_accounts (array)
            + (object)
                + timed_account: 1 (number) - ID of the Timed Account
                + balance_dates (array)
                    + (object)
                        + date: `2017-07-01`(string) - Date of the balance in format `YYYY-MM-DD`.
                        + acquisitions_at_date: 2.08 (number) - Amount acquired on this Timed Account for this User at `date`.
                        + acquisitions_future: 22.96 (number) - Amount to acquire on this Timed Account for this User after `date`.
                        + consumptions_at_date: 1 (number) - Amount consumed on this Timed Account for this User until `date`.
                        + acquisitions_future: 22.96 (number) - Amount to consume on this Timed Account for this User after `date`.
                        + balance: 1.08 (number) - Balance of the Timed Account for this User at `date`.
                        + remaining_balance: 24 (number) - Amount remaining to consume on this Timed Account for this User (acquired yet or not).

## Users Collection [/users/{?name}{?disabled}{?validated}]

+ Parameters
    + name: arth (string, optional) - Filter the Users with `firstName` or `lastName` partially matching this value (case insensitive).
    + disabled: false (boolean, optional) - Filter the Users that are disabled, i.e. `endDate` is not null and is older that seven days ago.
    + validated: false (boolean, optional) - Filter the Users that the user validates.

### Retrieve all Users [GET]
Retrieve all the Users.

+ Response 200 (application/json)
    + Attributes (object)
        + Include Pagination
        + results (array[User]) - Array of results.

# Group Groups
Groups allow to organize Users in different services or teams. They are used in the schedule view and allow administrators to perform bulk actions like balance adjustments or exports.

## Group [/new-groups/{id}/]

+ Parameters
    + id: 1 (number) - The ID of the Group.

### Retrieve a Group [GET]
Retrieve the Group with the given ID.

+ Response 200 (application/json)
    + Attributes (GroupWithMPTT)

### Update a Group [PATCH]
Update the Group with the Given ID. **Administrators only**.

+ Request
    + Attributes (Group)

+ Response 200 (application/json)
    + Attributes (GroupWithMPTT)

### Delete a Group [DELETE]
Delete the Group with the given ID **with all its descendants**. **Administrators only**.

+ Response 204

## Group Collection [/new-groups/{?show_in_planning}]

+ Parameters
    + show_in_planning: true (boolean, optional) - Filter the Group showing in the schedule.

### Create a Group [POST]
Create a new Group. **Administrators only**.

+ Request
    + Attributes (Group)

+ Response 201 (application/json)
    + Attributes (GroupWithMPTT)

### Retrieve all Groups [GET]
Retrieve all the Groups.

+ Response 200 (application/json)
    + Attributes (object)
        + Include Pagination
        + results (array[GroupWithMPTT]) - Array of results.

# Group Calendar Layers
Calendar Layers represent recurring weeks or annual calendars that could be added to a Calendar Profile. They are useful to know when the employee actually works to count correctly the leave.

## Calendar Layer [/calendar-layers/{id}/]

+ Parameters
    + id: 1 (number) - The ID of the Calendar Layer.

### Retrieve a Calendar Layer [GET]
Retrieve the Calendar Layer with the given ID.

+ Response 200 (application/json)
    + Attributes (Calendar Layer)

## Calendar Layers Collection [/calendar-layers/]

### Retrieve all Calendar Layers [GET]
Retrieve all the Calendar Layers.

+ Response 200 (application/json)
    + Attributes (object)
        + Include Pagination
        + results (array[Calendar Layer]) - Array of results.

# Group Calendar Profiles
Calendar Profiles represent a set of Calendar Layers that can be associated to a User. A common case is to setup a Calendar Profile with the Calendar Layers "Week-end" and "Public holidays".

## Calendar Profile [/calendar-profiles/{id}/]

+ Parameters
    + id: 1 (number) - The ID of the Calendar Profile.

### Retrieve a Calendar Profile [GET]
Retrieve the Calendar Profile with the given ID.

+ Response 200 (application/json)
    + Attributes (Calendar Profile)

## Calendar Profiles Collection [/calendar-profiles/]

### Retrieve all Calendar Profiles [GET]
Retrieve all the Calendar Profiles.

+ Response 200 (application/json)
    + Attributes (object)
        + Include Pagination
        + results (array[Calendar Profile]) - Array of results.

# Group Free Calendars
Free Calendars are convenient calendars provided by the Nereo team. Currently, it is used only to display French school holidays. *They are not taken into account in any computation*.

## Free Calendar [/free-calendars/{id}/]

+ Parameters
    + id: 1 (number) - The ID of the Free Calendar.

### Retrieve a Free Calendar [GET]
Retrieve the Free Calendar with the given ID.

+ Response 200 (application/json)
    + Attributes (Free Calendar)

## Free Calendars Collection [/free-calendars/]

### Retrieve all Free Calendars [GET]
Retrieve all the Free Calendars.

+ Response 200 (application/json)
    + Attributes (object)
        + Include Pagination
        + results (array[Free Calendar]) - Array of results.

# Group Accounts
Accounts represent all the absences types available in your company: paid leaves, sick leave, etc.

## Account [/accounts/{id}/]

+ Parameters
    + id: 1 (number) - The ID of the Account.

### Retrieve an Account [GET]
Retrieve the Account with the given ID.

+ Response 200 (application/json)
    + Attributes (Account)

## Accounts Collection [/accounts/{?hidden}]

+ Parameters
    + hidden: false (boolean, optional) - Filter the Accounts hidden to the employees.

### Retrieve all Accounts [GET]
Retrieve all the Accounts.

+ Response 200 (application/json)
    + Attributes (object)
        + Include Pagination
        + results (array[Account]) - Array of results.

# Group Timed Accounts
Accounts are not used alone. Each one is associated to one or several Timed Accounts which are absences associated to a period of accrual (when Nereo credits the account) and a period of consumption (when the employee is allowed to book leave on this account).

## Timed Account [/timed-accounts/{id}/]

+ Parameters
    + id: 1 (number) - The ID of the Timed Account.

### Retrieve a Timed Account [GET]
Retrieve the Timed Account with the given ID.

+ Response 200 (application/json)
    + Attributes (Timed Account)

## Timed Accounts Collection [/timed-accounts/{?title}{?account}{?user}{?closed}{?hidden}]

+ Parameters
    + title: paid (string, optional) - Filter the Timed Accounts with `tatitle` partially matching this value (case insensitive).
    + account: 1 (number, optional) - Filter the Timed Accounts associated to this Account ID.
    + user: 1 (number, optional) - Filter the Timed Accounts on which the User ID is allowed on.
    + closed: false (boolean, optional) - Filter the Timed Accounts that are closed.
    + hidden: false (boolean, optional) - Filter the Timed Accounts that are hidden to the employees.

### Retrieve all Timed Accounts [GET]
Retrieve all the Timed Accounts.

+ Response 200 (application/json)
    + Attributes (object)
        + Include Pagination
        + results (array[Timed Account]) - Array of results.

# Group Flows
Flows represent an entry in a Timed Account for a particular User.

## Flow [/flows/{id}/]

+ Parameters
    + id: 1 (number) - The ID of the Flow.

### Retrieve a Flow [GET]
Retrieve the Flow with the given ID.

+ Response 200 (application/json)
    + Attributes (Flow)

## Flows Collection [/flows/{?min_date}{?max_date}{?user}{?timed_account}]

+ Parameters
    + min_date: `2017-01-01` (string, optional) - Filter the Flows *from* this date (on `accountDate`).
    + max_date: `2017-01-30` (string, optional) - Filter the Flows *until* this date (on `accountDate`).
    + user: 1 (number, optional) - Filter the Flows of the User associated to this ID.
    + timed_account: 1 (number, optional) - Filter the Flows of the Timed Account associated to this ID.

### Retrieve all Flows [GET]
Retrieve all the Flows.

+ Response 200 (application/json)
    + Attributes (object)
        + Include Pagination
        + results (array[Flow]) - Array of results.

### Get estimated Flows [POST /flow/estimations/]
Internally, Nereo executes the accrual rules everyday to compute the new Flows to credit to each account. Before they are actually written, it is possible to get them for a particular User and Timed Account. It could be useful to check if the rule executes correctly.

+ Request
    + Attributes (object)
        + timed_account: 1 (number, required) - ID of the Timed Account to get the estimations Flows for.
        + user: 1 (number, required) - ID of the User to get the estimations Flows for.

+ Response 200 (application/json)
    + Attributes (array[Flow])

# Group Leave Requests
Leave requests are at the heart of the Nereo system: they represent an absence of an employee.

## Leave Request [/leaverequests/{id}/]

+ Parameters
    + id: 1 (number) - The ID of the Leave Request.

### Retrieve a Leave Request [GET]
Retrieve the Leave Request with the given ID.

+ Response 200 (application/json)
    + Attributes (Leave Request)

### Cancel a Leave Request [DELETE]
Delete the Leave Request if it has not been validated yet (`state` is `Re`) **or** create a cancellation Leave Request otherwise.

The cancellation Leave Request behaves then just as a regular Leave Request and has to go through the whole validation process.

+ Response 200 (application/json)
    The Leave Request was not validated yet (`state` is `Re`): it's definitely removed.
    + Attributes (object)
        + detail: `Leave request cancelled` (string) - Status message.

+ Response 201 (application/json)
    The Leave Request was validated (`state` is `V1` or `Va`): a cancellation Leave Request is created.
    + Attributes (object)
        + cancellationLeaveRequestId: 10 (number) - ID of the cancellation Leave Request.
        + detail: `A cancellation request has been created.` (string) - Status message.
        + validated: false (boolean) - Whether or not the cancellation request has automatically been validated. Happens when the cancellation is requested by an administrator or one of the validators of the Employee. 

### Validate a Leave Request [PATCH /leaverequests/{id}/validate/]
Validate the Leave Request. Depending on the current `state` and the validators of the Employee, several cases could happen:
* Employee has only one validator and `state` is `Re` : Leave Request is validated (`state` becomes `Va`).
* Employee has two validators and `state` is `Re` : only the first validator can validate, Leave Request `state` becomes `V1`.
* Employee has two validators and `state` is `V1` : only the second validator can validate, Leave Request is validated (`state` becomes `Va`).

+ Request
    + Attributes (Comment, optional)

+ Response 200 (application/json)
    + Attributes (Leave Request)

+ Response 403 (application/json)
    Happens when the user doesn't have the rights to validate the Leave Request:
    * An Employee can't validate its own request (**even if they are admin**).
    * First validator while `state` is `V1`.
    + Attributes (object)
        + detail: `Nice try but no, you can't validate your own request 😜` (string) - Status message.

### Deny a Leave Request [PATCH /leaverequests/{id}/deny/]
Deny the Leave Request. Depending on the current `state` and the validators of the Employee, several cases could happen:
* Employee has only one validator and `state` is `Re` : Leave Request is denied (`state` becomes `Rf`).
* Employee has two validators and `state` is `Re` : only the first validator can deny, Leave Request is denied (`state` becomes `Rf`).
* Employee has two validators and `state` is `V1` : only the second validator can deny, Leave Request is denied (`state` becomes `Rf`).

+ Request
    + Attributes (Comment, optional)

+ Response 200 (application/json)
    + Attributes (Leave Request)

+ Response 403 (application/json)
    Happens when the user doesn't have the rights to deny the Leave Request:
    * An Employee can't deny its own request (**even if they are admin**).
    * First validator while `state` is `V1`.
    + Attributes (object)
        + detail: `Nice try but no, you can't validate your own request 😜` (string) - Status message.

### Comment a Leave Request [PATCH /leaverequests/{id}/comment/]
Add a comment to the Leave Request.

+ Request
    + Attributes (Comment, required)

+ Response 200 (application/json)
    + Attributes (Leave Request)

+ Response 403 (application/json)
    Happens when the user doesn't have the rights to comment the Leave Request: neither the Employee, one of the validator of the Employee, nor an admin.
    + Attributes (object)
        + detail: `You can't comment this request.` (string) - Status message.

## Leave Requests Collection [/leaverequests/{?id}{?user}{?min_date}{?max_date}{?state}{?is_cancellation_request}{?has_cancellation_request_pending}{?to_validate}]

+ Parameters
    + id: 1 (number, optional) - ID of the the Leave Request. *It's possible to put this query parameter several times to filter on several leave requests.*
    + user: 1 (number, optional) - ID of the User concerned by the Leave Request. *It's possible to put this query parameter several times to filter on several users.*
    + min_date: `2017-01-01` (string, optional) - Filter the Leave Requests *from* this date.
    + max_date: `2017-01-07` (string, optional) - Filter the Leave Requests *until* this date.
    + state: Re (string, optional) - Filter the Leave Requests at this `state`. *It's possible to put this query parameter several times to filter on several states.*
    + `is_cancellation_request`: false (boolean, optional) - Filter the Leave Requests that are cancellation Leave Requests of others.
    + `has_cancellation_request_pending`: false (boolean, optional) - Filter the Leave Requests that have cancellation Leave Requests pending validation.
    + `to_validate`: false (boolean, optional) - Filter the Leave Requests that the current user has to validate (cancellation Leave Requests included).

### Retrieve all Leave Requests [GET]
Retrieve all Leave Requests that the user can review:
* All if the user is admin.
* It's own and the ones of the Employees the user validates.
* Only it's own otherwise.

+ Response 200 (application/json)
    + Attributes (object)
        + Include Pagination
        + results (array[Leave Request]) - Array of results.

### Cancel Leave Requests in bulk [DELETE]
Cancel Leave Requests matching the filters. For safety reasons, the header `X-BULK-OPERATION` set to `true` is required. **If any of the Leave Requests selected can't be cancelled, the whole operation is rejected.**

+ Request
    + Headers

            X-BULK-OPERATION: true

+ Response 200 (application/json)
    + Attributes (object)
        + detail (array) - Results list
            + (object)
                + leave_request: 1 (number) - ID of the Leave Request associated to this result.
                + cancellationLeaveRequestId: 10 (number, optional) - ID of the cancellation Leave Request.
                + detail: `A cancellation request has been created.` (string) - Status message.
                + validated: false (boolean, optional) - Whether or not the cancellation request has automatically been validated. Happens when the cancellation is requested by an administrator or one of the validators of the Employee. 

+ Response 403 (application/json)
List of errors encountered while trying to cancel the selected Leave Requests.
    + Attributes (Leave Request Bulk Action Error)

### Validate Leave Requests in bulk [PATCH /leaverequests/validate/{?id}{?user}{?min_date}{?max_date}{?state}{?is_cancellation_request}{?has_cancellation_request_pending}{?to_validate}]
Validate Leave Requests matching the filters. For safety reasons, the header `X-BULK-OPERATION` set to `true` is required. **If any of the Leave Requests selected can't be validated, the whole operation is rejected.**

+ Request
    + Headers

            X-BULK-OPERATION: true

+ Response 200 (application/json)
    + Attributes (object)
        + Include Pagination
        + results (array[Leave Request]) - Array of results.

+ Response 403 (application/json)
List of errors encountered while trying to validate the selected Leave Requests.
    + Attributes (Leave Request Bulk Action Error)

### Deny Leave Requests in bulk [PATCH /leaverequests/deny/{?id}{?user}{?min_date}{?max_date}{?state}{?is_cancellation_request}{?has_cancellation_request_pending}{?to_validate}]
Deny Leave Requests matching the filters. For safety reasons, the header `X-BULK-OPERATION` set to `true` is required. **If any of the Leave Requests selected can't be denied, the whole operation is rejected.**

+ Request
    + Headers

            X-BULK-OPERATION: true

+ Response 200 (application/json)
    + Attributes (object)
        + Include Pagination
        + results (array[Leave Request]) - Array of results.

+ Response 403 (application/json)
List of errors encountered while trying to deny the selected Leave Requests.
    + Attributes (Leave Request Bulk Action Error)

## Create a simple Leave Request [/leaverequests/quick/]
Provide an endpoint to create a Leave Request in one call. Only one Timed Account can be provided. If you wish to create a complex Leave Request with several Timed Accounts, refer to the *Create a complex Leave Request* section.

### Create a simple Leave Request [POST]

+ Request
    + Attributes (object)
        + Include Leave Request Creation Base
        + timed_account: 1 (number, required) - ID of the Timed Account on which withdraw the absence.

+ Response 200 (application/json)
    + Attributes (Leave Request)

+ Response 400 (application/json)
    Happens when:
    * The user doesn't have the rights to create a Leave Request on behalf of the Employee.
    * The Account associated to the Timed Account provided is `hidden` and the user is not an admin.
    + There are blocking errors preventing this Leave Request to be created (negative balance, consumption constraint not fulfilled, Employee already absent...)
    + Attributes (object)
        + detail: `Impossible request` (string) - Status message.

## Create a complex Leave Request [/leaverequests/]
Provide an endpoint to create a complex Leave Request, providing several Timed Account distributed among the days of the absence.

Before doing that, it's **necessary to make a call to an endpoint that will provide groups of accounts**.

### Get groups of accounts [POST /leaverequests/accounts-groups/]
Indeed, given the account type ("jours ouvrés" or "jours ouvrables" in French law), a same day may not weigh the
same from one account to another. Let's take an example: an Employee works usually from **Monday to Friday** and want to **book an absence** from **Friday** to the **next Monday**. Three main cases could happen:
* Account is in "jours ouvrables", and no absence have been booked before: this absence will weigh **2 days** ; Saturday is considered as worked.
* Account is in "jours ouvrés": this absence will weigh **1 day** ; only Friday counts.
* Account is in "jours ouvrables", but already **5 Saturdays** have been counted on other absences: this absence will weigh **1 day** ; this limit of five is here to prevent the Employee from being wronged if they only book absence across two weeks.

That's why we need an endpoint that provide groups of accounts that will weigh the same for the same absence.
**It's not possible to distribute an absence on accounts that not behave the same.**

+ Request
    + Attributes (object)
        + user: 1 (number, optional) - ID of the User concerned by the Leave Request, the Employee. *If not provided, the new Leave Request is associated to the current user.*
        + begin_date: `2017-01-01` (string, required) - First date of the absence in format `YYYY-MM-DD`.
        + end_date: `2017-01-07` (string, required) - Last date of the absence in format `YYYY-MM-DD`.

+ Response 200 (application/json)
    + Attributes (array)
        + (object)
            + groupKey: adjGrp0 (string) - ID of the accounts group. *Needed later for the creation of the Leave Request*
            + nb_days: 7 (number) - Number of days counted by this absence for these accounts.
            + timed_accounts: 1, 2, 3 (array[number]) - List of IDs of the Timed Accounts in this group.

### Create a complex Leave Request [POST]
Once the accounts group is selected, a distribution array specifying how the absence is distributed accross all days for each
account has to be provided.

> UNDOCUMENTED YET - SUBJECT TO CHANGES

+ Request
    + Attributes (object)
        + Include Leave Request Creation Base

+ Response 200 (application/json)
    + Attributes (Leave Request)
    
# Group Exports
Specific endpoints that allows you to launch export jobs. As they run as background processes, when the initial call is made, you will get a `process_id`. Thanks to the `status` endpoint, you'll then be able to query the process status and get its result when it's finished.

## Export status [GET /exports/{process_id}/status/]
Retrieve the status of an export given the process ID.

+ Response 200 (application/json)
    Export is still pending.
    + Attributes (object)
        + status: PENDING (string) - Status of the export process.
        
+ Response 201 (application/json)
    Export is finished and successful.
    + Attributes (object)
        + status: SUCCESS (string) - Status of the export process.
        + result (object) - Result of the export.
            + url: `https://cdn.42.com/exports/adent.xlsx` (string) - URL of the exported file.

## Schedule Export [POST /exports/planning/]
Launch an export of the schedule in Excel format.

+ Request
    + Attributes (Schedule Export)
    
+ Response 202 (application/json)
    + Attributes (Launched Export)
    
## Users checklist Export [POST /exports/userschecklist/]
Launch an export of the users checklist in Excel format. Contains information about the configuration of every users: basic information, validators, calendar profiles, allowances and belonging groups.
**An administrator token is required to access it**.

+ Response 202 (application/json)
    + Attributes (Launched Export)

# Group Administration
This section details all the administration-related endpoints.
**An administrator token is required to access them**.

## Settings [/admin/settings/]
Settings of your company on Nereo.

### Retrieve settings [GET]

+ Response 200 (application/json)
    + Attributes (Settings)

### Update settings [POST]

+ Request
    + Attributes (Settings)

+ Response 200 (application/json)
    + Attributes (Settings)

### Force Google Calendar synchronization [POST /admin/settings/synchronize-google-calendar/]
Manually launch the synchronization of the leave requests to the Google calendars of your collaborators.

+ Response 200 (application/json)
    + Attributes (object)
        + detail: Request synchronization pending. (string) - Status message.
        + process_id: `e1e1e702-29dd-4543-befd-ac3fb5775556` (string) - ID of the synchronization process.

+ Response 403 (application/json)
    + Attributes (object)
        + detail: `Google Calendar synchronization is disabled on your instance or hasn't been allowed in your Google domain's settings.` (string) - Status message.

# Data structures

## Pagination (object)

+ count: 100 (number) - Total number of results.
+ next: null (string, nullable) - URL of the next page of results.
+ previous: null (string, nullable) - URL of the previous page of results.

## CreatedAtUpdatedAt (object)

+ created_at: `2017-06-02T13:37:42.000000Z`(string) - Creation date of the object.
+ updated_at: `2017-06-02T13:37:42.000000Z`(string) - Last update date of the object.

## Account (object)

+ id: 1 (number)
+ Include CreatedAtUpdatedAt
+ title: Paid leave (string) - Title of the absence.
+ backColor: #2c2f3b (string) - Color of the absence shown in the interface in hexadecimal format.
+ distribution: false (boolean) - If `true`, the absence is considered as secondary. **IMPROVEMENT NEEDED**
+ show: true (boolean) - Whether or not the absence is bookable directly by the user.
+ priority: 1 (number) - Order of the absence in the list. **IMPROVEMENT NEEDED**
+ visibleInPlanning: false (boolean) - Whether or not the absence is visible by everyone in the schedule. **IMPROVEMENT NEEDED**
+ adjusterType: Oe (enum) - Type of counting of the absence. **IMPROVEMENT NEEDED**
    + Ho (string) - Absence is counted in hours.
    + Oe (string) - Absence is counted in worked days ("jours ouvrés" in French law).
    + Oa (string) - Absence is counted in workable days ("jours ouvrables" in French law).
    + Ca (string) - Absence is counted in calendar days ("jours calendaires" in French law).

## Timed Account (object)

+ id: 1 (number)
+ Include CreatedAtUpdatedAt
+ key: ta_paidleave20162017 (string) - Key associated to the Timed Account, used in some parts of the API. *We'll try to get rid of it ASAP*.
+ tatitle: `Paid leave 2016-2017` (string) - Title of the Timed Account.
+ account: 1 (number) - ID of the Account associated to this Timed Account.
+ startCredit: `2016-06-01` (string) - Begin date of the accrual period in format `YYYY-MM-DD`.
+ endCredit: `2017-05-31` (string) - End date of the accrual period in format `YYYY-MM-DD`.
+ startDebt: `2017-06-01` (string) - Begin date of the consumption period in format `YYYY-MM-DD`.
+ endDebt: `2018-05-31` (string) - End date of the consumption period in format `YYYY-MM-DD`.
+ closeDate: `2018-06-01` (string) - Date in format `YYYY-MM-DD` from which the Timed Account is closed in format: no more entries are allowed.
+ color: #2c2f3b (string) - Color of the absence shown in the interface in hexadecimal format (same as `backColor` on Account).
+ secondary: false (boolean) - Whether or not the absence is considered as secondary (same as `!distribution` on Account).
+ order: 1 (number) - Order of the absence in the list (same as `priority` on Account).
+ visible_in_planning: false (boolean) - Whether or not the absence is visible by everyone in the schedule (same as `visibleInPlanning` on Account).
+ adjuster_type: Oe (enum) - Type of counting of the absence (same as `adjusterType` on Account).
    + Ho (string) - Absence is counted in hours.
    + Oe (string) - Absence is counted in worked days ("jours ouvrés" in French law).
    + Oa (string) - Absence is counted in workable days ("jours ouvrables" in French law).
    + Ca (string) - Absence is counted in calendar days ("jours calendaires" in French law).

## Flow (object)

+ id: 1 (number)
+ Include CreatedAtUpdatedAt
+ title: Consumption (string) - Title of the Flow.
+ recordDate: `2016-12-01` (string) - Date on which this Flow is recorded  in format `YYYY-MM-DD`.
+ accountDate: `2017-01-01` (string) - Date on which this Flow is accounted in format `YYYY-MM-DD`.
+ amountCredit: 2.08 (number) - Amount of accrual added to the account. *Could be negative: for example, if a rule credited too much, an adjustment could be made and a Flow with a negative `amountCredit` would be created.*
+ amountDebt: 1 (number) - Amount of absence taken to the account. *Could be negative: for example, if a Leave Request is cancelled, a Flow with a negative `amountDebt` is created.*

## Leave Request (object)

+ id: 1 (number)
+ addDate: `2017-06-02T13:37:00Z` (string) - Creation date of the Leave Request.
+ user: 1 (number) - ID of the User concerned by the Leave Request, the Employee.
+ state: Re (enum) - Validation state of the Leave Request.
    + Re (string) - The Leave Request is requested.
    + V1 (string) - The Leave Request is validated by the first validator.
    + Va (string) - The Leave Request is validated.
    + Rf (string) - The Leave Request is refused.
    + Ca (string) - The Leave Request is cancelled.
+ imposed: false (boolean) - Whether or not the Leave Request has been imposed by a validator or an administrator.
+ firstDateKey: `2017-01-01` (string) - First date of the absence in format `YYYY-MM-DD`.
+ lastDateKey: `2017-01-07` (string) - Last date of the absence in format `YYYY-MM-DD`.
+ `_morning_included`: true (boolean) - Whether or not the morning of the `firstDateKey` is included in the absence.
+ `_afternoon_included`: true (boolean) - Whether or not the afternoon of the `lastDateKey` is included in the absence.
+ cancelForLeaveRequest: 10 (number, nullable) - ID of the Leave Request that this Leave Request cancels. `null` if this Leave Request is not a cancellation request.
+ cancellationLeaveRequests: 20, 30, 40 (array[number]) - List of the IDs of the Leave Requests that cancels this Leave request. Empty if this Leave Request has not any cancellation request.
+ leaveRequestDates (array) - Each day concerned by the Leave Request is represented by a Leave Request Date that provides details about the absence on this particular day.
    + (object)
        + dateKey: `2017-01-01` (string) - Date in format `YYYY-MM-DD`.
        + planMark: `all` (enum) - Period of the day on which this Leave Request Date applies.
            + all (string) - All day
            + am (string) - Morning only
            + pm (string) - Afternoon only
        + caw: false (boolean) - Whether or not the date is "considered as work". In French law, this field is here to cope with "jours ouvrables".
        + distribution (array) - Specifies how the absence for this day is distributed among the absences accounts of the Employee.
            + (object)
                + account: 1 (number) - ID of the Timed Account on which this part of the absence is withdrawn.
                + amount: 1 (number) - Value withdrawn from the `account`.
+ comments (array) - Comments posted by the users about this Leave Request.
    + (object)
        + author: 42 (number) - Id of the User author of this comment.
        + addDate: `2017-06-02T13:37:00Z` (string) - Creation date of the comment.
        + text: `Know where your towel is.` (string) - Text of the comment.

## Comment (object)

+ comment: `Know where your towel is.` (string) - Text of the comment.

## Leave Request Creation Base (object)

+ user: 1 (number, optional) - ID of the User concerned by the Leave Request, the Employee. *If not provided, the new Leave Request is associated to the current user.*
+ begin_date: `2017-01-01` (string, required) - First date of the absence in format `YYYY-MM-DD`.
+ end_date: `2017-01-07` (string, required) - Last date of the absence in format `YYYY-MM-DD`.
+ `morning_included`: true (boolean, required) - Whether or not the morning of the `begin_date` is included in the absence.
+ `afternoon_included`: true (boolean, required) - Whether or not the afternoon of the `end_date` is included in the absence.
+ Include Comment

## Leave Request Bulk Action Error (object)

+ detail (array) - Errors list
    + (object)
        + leave_request: 1 (number) - ID of the Leave Request provoking the error.
        + detail: `Nice try but no, you can't validate your own request 😜` (string) - Status message.

## User (object)

+ id: 1 (number)
+ organization_slug: h2g2 (string) - Slug of the Organization which the User belongs to.
+ username: adent (string) - Username of the User used to login.
+ email: adent@42.com (string) - E-mail address of the User.
+ firstName: Arthur (string) - First name of the User.
+ lastName: Dent (string) - Last name of the User.
+ phone: null (string, nullable) - Phone number of the User.
+ birthDate: `1978-01-01` (string, nullable) - Birthdate of the User in format `YYYY-MM-DD`.
+ isAdmin: false (boolean) - Whether or not this User has the admin rights on the company.
+ startDate: `2010-01-01` (string, nullable) - Date of arrival of the User in the company in format `YYYY-MM-DD`.
+ endDate: `2017-01-01` (string, nullable) - Date of departure of the User from the company in format `YYYY-MM-DD`.
+ planViewRight: AT (enum) - Vision rights of the User on the planning.
    + HS (string) - "Himself", the User can only view himself in the planning.
    + HT (string) - "His team", the User can view himself and the Users of his team in the planning.
    + AT (string) - "All team", the User can view everyone in the planning.
+ validator1: 2 (number) - User ID of the first validator of the User.
+ validator2: 3 (number, nullable) - User ID of the second validator of the User.
+ substituteValidator: 4 (number, nullable) - User ID of the User replacing this User for validation when he is absent.
+ externalId: adent (string, nullable) - Identifier used for some payroll exports.
+ comment: Interpreted in 2005 by Martin Freeman (string, nullable) - Comment added by an admin about the User.
+ timedAccounts: 1, 2, 3, 4 (array[number]) - List of IDs of Timed Accounts the User is allowed on.
+ calendarProfilePeriods (array[Calendar Profile Period]) - Calendar Profiles of the User.

## Group (object)

+ id: 1 (number)
+ Include CreatedAtUpdatedAt
+ name: `H2G2`(string) - Name of the Group.
+ slug: `h2g2` (string) - Slug of the Group.
+ description: `The Hitchhiker's Guide to the Galaxy` (string) - Description of the Group. **Unused at the moment**.
+ show_in_planning: true (boolean) - Whether or not this Group is displayed in the schedule.
+ parent: 2 (number, nullable) - ID of the parent Group. `null` if this Group is a root.
+ order: 0 (number) - Order of the Group in the list, `0` being the one at the top.
+ managers: 1 (array[number]) - List of IDs of Users managing this Group. **Unused at the moment**.
+ members: 2, 3, 4 (array[number]) - List of IDs of Users belonging to this Group.

## GroupWithMPTT (object)

+ Include Group
+ lft: 0 (number) - Value related to the [MPTT structure](https://www.sitepoint.com/hierarchical-data-database-2/). **Read-only**.
+ rght: 0 (number) - Value related to the [MPTT structure](https://www.sitepoint.com/hierarchical-data-database-2/). **Read-only**.
+ level: 0 (number) - Value related to the [MPTT structure](https://www.sitepoint.com/hierarchical-data-database-2/). **Read-only**.
+ tree_id: 0 (number) - Value related to the [MPTT structure](https://www.sitepoint.com/hierarchical-data-database-2/). **Read-only**.

## Calendar Profile Period (object)

+ calendarProfile: 1 (number) - ID of the Calendar Profile.
+ startDate: `2016-01-01` (string) - Date from which this Calendar Profile is applied.
+ endDate: `2016-12-31` (string) - Date until which this Calendar Profile is applied.

## Calendar Profile (object)

+ id: 1 (number)
+ title: `Full-time` (string) - Title for this Calendar Profile.
+ calendars: 1, 2, 3, 4 (array[number]) - List of IDs of Calendar Layers associated to this Calendar Profile.

## Calendar Layer (object)

+ id: 1 (number)
+ title: `Week-ends` (string) - Title for this Calendar Layer.
+ calendarFeeder (string) - JavaScript function that resolves internally to days-off.
+ editor WE (enum) - Calendar editor type to show in the interface.
    + WE (string) - Week
    + MO (string) - Month
    + YR (string) - Year
    + SC (string) - Script

## Free Calendar (object)

+ id: 1 (number)
+ title: School Holidays A (string) - Title for this Free Calendar.
+ key: school_holidays_a (string) - Key for this Free Calendar.
+ dates (array[Free Calendar Date]) - List of dates on this Free Calendar.

## Free Calendar Date (object)

+ dateKey: `2017-08-31` (string) - Date on this Free Calendar.

## Launched Export (object)

+ detail: `Export has been launched` (string) - Status message.
+ process_id: `c36693e6-846e-4cfb-b1fc-335b009bd331` (string) - Process ID.

## Schedule Export (object)

+ begin_date: `2017-01-01` (string) - Start date of the export.
+ end_date: `2017-12-31` (string) - End date of the export.
+ users: 1, 2, 3, 4 (array[number], optional) - List of IDs of Users you want to export the schedule. Either this field or `group` must be provided.
+ group: 1 (number) - ID of the Group you want to export the schedule. Either this field or `users` must be provided.
+ show_absence_types: true (boolean) - Whether or not to display the absence types on the exported schedule.
+ show_account_initial: false (boolean) - Whether or not to display the first letter of the absence types name in the cells.

## Settings (object)

+ emails_enabled: true (boolean) - Whether or not the e-mails are sent to the users.
+ show_hidden_absences: false (boolean) - Whether or not the hidden absences are always shown under the calendar and schedule.
+ absences_rules : `O Deep Thought computer, the task we have designed you to perform is this. We want you to tell us.... The Answer.` (string, nullable) - Customizable text to communicate absences rules of the company to the Employees.
+ google_calendar_synchronization_enabled: true (boolean) - Whether or not the Google Calendar synchronization is enabled on your Nereo instance.
+ google_calendar_authorized: true (boolean) - Whether or not Nereo is allowed to access to your Google domain.